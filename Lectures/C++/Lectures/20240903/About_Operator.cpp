/*
연산자(operator)
=======================================================================
-산술연산자(+ , - , * , / , %)
└ + : 두 값을 더한다. a + b
└ - : 두 값에서 하나의 값을 뺸다. a - b
└ * : 두 값을 곱한다. a * b
└ / : 첫번쨰 값을 두번쨰 값으로 나눈다. a / b
└ % : 나머지 연산자. 첫번째 값을 두번째 값으로 나눈후 나머지를 반환 a % b
=======================================================================
-증감 연산자(++,--)
└증감 연산자는 ++,--기호를 이용하는 연산자
└피연산자의 값을 1증가 또는 1감소시킨다.
└++a : 선 증가 후 연산 (먼저 증가 후 그 다음 연산)
└a++ : 선 연산 후 증가 (먼저 연산 후 그 다음 증가)
└--a : 선 감소 후 연산 (먼저 감소 후 그 다음 연산)
└a-- : 선 연산 후 감소 (먼저 연산 후 그 다음 감소)

**연산자가 앞에 오면 전위연산 , 뒤에오면 후위연산**
└증감연산자의 위치가 변수의 앞에 위치하는 표현을 전위 , 뒤에 위치하는 표현을 후위
======================================================================
-관계연산자 ( > , < , <= , >= , == , !=)
a > b ==========> 피연산자 a가 피연산자 b보다 크다
a < b ==========> 피연사자 a가 피연산자 b보다 작다

a >= b ===========> 피연산자 a가 피연산자 b보다 크거다 같다
a <= b ===========> 피연산자 a가 피연산자 b보다 작거나 같다
a == b ===========> 피연산자 a가 피연산자 b와 같다
a != b ===========> 피연산자 a가 피연산자 b와 다르다
======================================================================
-논리 연산자(&&,||.!)
└&&(and) : 연산자의 결과는 피연산자가 모두 참일때만 true
피연산자			연산자			피연산자			결과
	0			 &&				   0			 0
	0			 &&				   1			 0
	1			 &&				   0			 0
	1			 &&				   1			 1
└||(or) : 연산자의 결과는 피연산자 둘중 하나가 참이면 true
피연산자			연산자			피연산자			결과
	0			 ||				   0			 0
	0			 ||				   1			 1
	1			 ||				   0			 1
	1			 ||				   1			 1
└! : 연산자의 결과는 피연산자가 거짓이면 참 , 참이면 거짓
피연산자			연산자			피연산자			결과
	0			 !				   0			 0
	0			 !				   1			 1
	1			 !				   0			 1
	1			 !				   1			 1

======================================================================
비트 연산자
└비트 연산자는 데이터를 비트 단위로 처리하는 연산자.
└하드웨어와 밀접하게 관련된 각종 처리를 쉽게 해주고 메모리 공간을 줄여서 성능을 높여준다.
└컴퓨터는 모든 정보를 1과 0, 이진수 저장하고 처리함.

======================================================================
*비트?
└ 2진수 값 하나 (0 또는 1)를 저장할 수 있는 최소 메모리 공간을 의미함.
 - 1bit로 표현할수 있는건 1과 0
 - 2bit는 00,01,10,11 4개
 - 3bit는 8개
 - 1byte는 8비트이고 256개의 경우를 표현할 수 있는 저장용량을 가진다.

 -2진수 : 0,1 숫자사용
 -10진수 : 0~9까지의 숫자를 사용
 -16진수 : 0~9까지의 숫자와 9이후부터 a,b,c,d,e,f 문자를 사용
 └a는 정수 10 , b는 11...15는 f를 의미함
 └최대값은 f이므로 자릿수가 증가하는 시점은 f다음에 증가하게 된다
 -8진수 : 0~7까지의 숫자를 사용
 └최대값은 7이므로 자릿수가 증가하는 시점은 7다음에 증가하게 된다

 **비트연산자 종류**
 종류			연산식		   설명
 &				a&b        비트단위의 AND연산 /두개의 비트가 모두 1일때 1반환
 |				a|b		   비트단위의 OR연산  /두개의 비트중의 하나가 1일때 1반환
 ^				a^b		   비트단위의 XOR연산 /두개의 비트가 서로 같지않을경우 1을 반환
 ~				a~b		   비트단위의 NOT연산 /보수연산이라고 하며 비트를 반환
 <<				a<<3	   왼쪽으로 세칸이동 (비트를) /비트를 이동
 >>				a>>1	   오른쪽으로 한칸이동			/비트를 이동

 -복합대입 연산자
 +=		a+=b		/ a = a+b와 같다
 -=		a-=b		/ a = a-b와 같다
 *=     a*=b		/ a = a*b와 같다
 /=		a/=b		/ a = a/b와 같다
 &=		a&=b		/ a = a&b와 같다
 %=		a%=b		/ a = a%b와 같다
 |=
 ^=
 <<=

*/

#include<iostream>

int main() {

	int a = 10;
	int b = 3;

	std::cout << "=====산술연산자====" << std::endl;
	std::cout << " a + b = " << a + b << std::endl;
	std::cout << " a - b = " << a - b << std::endl;
	std::cout << " a * b = " << a * b << std::endl;
	std::cout << " a / b = " << a / b << std::endl;
	std::cout << " a % b = " << a % b << std::endl;
	std::cout << std::endl;
	std::cout << "=======증감연산자======" << std::endl;
	int num = 10;
	std::cout << "num의 값 : " << num << std::endl;
	num++; // num = num+1과 같다.
	std::cout << "num++ 후 num 의 값 : " << num << std::endl;
	++num;
	std::cout << "++num 후 num 의 값 : " << num << std::endl;
	--num;
	std::cout << "--num 후 num 의 값 : " << num << std::endl;
	num--;
	std::cout << "num-- 후 num 의 값 : " << num << std::endl;

	int num1 = 10;
	int num2 = 20;
	int c;
	int d;

	c = ++num1;//전위방식 , 선 증가 후 연산
	std::cout << " 변수 c의 값 : " << c << " , " << "변수 num1의 값 : " << num1 << std::endl;//11,11
	d = num2++;//후위방식 , 선 연산 후 증가(num2에 저장되어있는 20을 먼저 대입하고 증가 "="이 대입연산자)
	std::cout << " 변수 d의 값 : " << d << " , " << "변수 num2의 값 : " << num2 << std::endl;//20,21

	std::cout << "=====관계연산자=====" << std::endl;

	int num3 = 1;
	int num4 = 2;

	int result;
	int result1;
	int result2;
	int result3;

	result = (num3 > num4);// num3이 num 4보다 큰가
	result1 = (num3 <= num4);
	result2 = (num3 == num4);
	result3 = (num3 != num4);

	std::cout << "result 결과" << result << std::endl;
	std::cout << "result1 결과" << result1 << std::endl;
	std::cout << "result2 결과" << result2 << std::endl;
	std::cout << "result3 결과" << result3 << std::endl;

	bool bClick = 100;
	std::cout << bClick << std::endl;

	std::cout << "=====논리연산자=====" << std::endl;

	int num5 = 3;
	int num6 = 5;

	int result4, result5, result6;
	//1.(num5 > -) 참 , (num6 < 10) 참
	result4 = (num5 > 0) && (num6 < 10);
	//2.(num5 <= 2) 거짓 , (num6 > 5) 거짓
	result5 = (num5 <= 2) || (num6 > 5);
	result6 = !num6;

	std::cout << "result4의 결과 : " << result4 << std::endl;
	std::cout << "result5의 결과 : " << result5 << std::endl;
	std::cout << "result6의 결과 : " << result6 << std::endl;

	std::cout << "======비트 연산자(&)======" << std::endl;

	int bitNum1 = 20;
	int bitNum2 = 16;
	int bitRes;
	bitRes = bitNum1 & bitNum2;

	/*
	20 0001 0100
&	16 0001 0000
------------------
    16 0001 0000
	*/

	std::cout << "& 결과 : " << bitRes << std::endl;
	
	std::cout << "======비트 연산자(|)======" << std::endl;

	int bitNum3 = 20;
	int bitNum4 = 16;
	int bitRes1;
	bitRes1 = bitNum3 | bitNum4;

	/*
	20 0001 0100
|	16 0001 0000
------------------
	20 0001 0100
	*/

	std::cout << "| 결과 : " << bitRes1 << std::endl;

	int shiftNum = 10;
	int shiftRes = shiftNum << 2;

	/*
		10 0000 1010 <<1 ->20
		10 0000 1010 <<2 ->40
		왼쪽으로 비트를 한칸씩 이동할떄마다 *2
		오른쪽으로 비트를 한칸씩 이동할때마다 /2
		
	*/

	std::cout << "10 << 2 결과 : " << shiftRes << std::endl;

	int comNum = 1;
	int comNum1 = 2;
	int comRes = comNum += comNum1;

	std::cout << " 1 += 2 결과 : " << comRes << std::endl;

	//출력
	//std::cout;
	//입력
	//std::cin;

	int input;
	std::cin >> input;
	std::cout << "너가 입력한 숫자는 : " << input << std::endl;

	//과제 1
	//1. 두수의 입력을 받는다.
	//2. 두수를 입력한 사칙연산을 한다.
	//3. 연산결과를 출력한다.

	//ex)1,2  =>3

	//과제 2
	//1. 두수의 입력을 받는다.
	//2. 입력한 수를 비교하는 예제를 자유롭게 만들어라.
	//ex) input = 3  , input = 1


	//과제3 온도 변환 만들기
	//섭씨를 -> 화씨로 변환하기
	//[°C] * 1.8 + 32

	//과제4
	//내일 발표 , 무작위
	//메모리 구조에 대해 정리한다 (PPT) .
}